package client.gui;

import client.GameClient;
import org.json.JSONArray;
import org.json.JSONObject;
import shared.Grain;
import shared.Protocol;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;

/**
 * M√†n h√¨nh gameplay - k√©o th·∫£ h·∫°t g·∫°o/th√≥c
 */
public class GameplayFrame extends JFrame implements GameClient.MessageListener {
    private static GameplayFrame currentInstance = null; // Track current instance
    
    private GameClient client;
    private JSONObject currentUser;
    private boolean isHost;
    private String opponentUsername;
    
    private List<Grain> grains;
    private Grain draggingGrain;
    private int offsetX, offsetY;
    
    private volatile int myScore; // volatile ƒë·ªÉ tr√°nh race condition
    private int opponentScore;
    private int timeLeft; // gi√¢y
    private int totalGrains; // T·ªïng s·ªë h·∫°t trong tr·∫≠n ƒë·∫•u n√†y
    
    private JLabel timerLabel;
    private JLabel myScoreLabel;
    private JLabel opponentScoreLabel;
    private JLabel playerNameLabel;
    private JLabel opponentNameLabel;
    private GamePanel gamePanel;
    
    private Timer gameTimer;
    private Rectangle riceBasket;
    private Rectangle paddyBasket;
    
    private boolean gameEnded;
    
    public GameplayFrame(GameClient client, JSONObject user, JSONObject gameStartData, boolean isHost) {
        // ƒê√≥ng instance c≈© n·∫øu c√≥ v√† remove listener
        if (currentInstance != null && currentInstance != this) {
            currentInstance.client.removeMessageListener(currentInstance);
            currentInstance.dispose();
        }
        currentInstance = this;
        
        this.client = client;
        this.currentUser = user;
        this.isHost = isHost;
        this.myScore = 0;
        System.out.println("üîç Constructor - myScore initialized to: " + myScore + ", instance: " + System.identityHashCode(this));
        this.opponentScore = 0;
        this.timeLeft = 300; // 5 ph√∫t = 300 gi√¢y
        this.gameEnded = false;
        this.totalGrains = gameStartData.optInt("total_grains", 100); // L·∫•y t·ªïng s·ªë h·∫°t t·ª´ server
        
        // L·∫•y t√™n ƒë·ªëi th·ªß t·ª´ gameStartData
        this.opponentUsername = gameStartData.optString("opponent_username", "ƒê·ªëi th·ªß");
        
        setTitle("T·∫•m Nh·∫∑t Th√≥c - ƒêang ch∆°i");
        // T·ªëi ∆∞u k√≠ch th∆∞·ªõc ƒë·ªÉ v·ª´a kh√≠t m√†n h√¨nh
        setSize(1200, 800);
        setLocationRelativeTo(null); // CƒÉn gi·ªØa m√†n h√¨nh
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        
        client.addMessageListener(this);
        
        // Parse grains data
        parseGrainsData(gameStartData);
        
        initComponents();
        startGameTimer();
        
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                handleQuit();
            }
        });
    }
    
    private void parseGrainsData(JSONObject data) {
        grains = new ArrayList<>();
        JSONArray grainsArray = data.getJSONArray("grains");
        
        for (int i = 0; i < grainsArray.length(); i++) {
            JSONObject grainObj = grainsArray.getJSONObject(i);
            Grain grain = new Grain(
                grainObj.getInt("id"),
                grainObj.getString("type"),
                grainObj.getInt("x"),
                grainObj.getInt("y")
            );
            grains.add(grain);
        }
    }
    
    private void initComponents() {
        JPanel mainPanel = new JPanel(new BorderLayout());
        
        // Top panel - Info
        JPanel infoPanel = new JPanel(new BorderLayout());
        infoPanel.setBackground(new Color(76, 175, 80));
        infoPanel.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
        
        timerLabel = new JLabel("‚è±Ô∏è Th·ªùi gian: 02:00");
        timerLabel.setFont(new Font("Arial", Font.BOLD, 18));
        timerLabel.setForeground(Color.WHITE);
        timerLabel.setHorizontalAlignment(SwingConstants.CENTER);
        
        JPanel scoresPanel = new JPanel(new GridLayout(1, 2, 20, 0));
        scoresPanel.setOpaque(false);
        
        myScoreLabel = new JLabel("üìä B·∫°n: 0");
        myScoreLabel.setFont(new Font("Arial", Font.BOLD, 16));
        myScoreLabel.setForeground(Color.WHITE);
        
        opponentScoreLabel = new JLabel("üë§ ƒê·ªëi th·ªß: 0");
        opponentScoreLabel.setFont(new Font("Arial", Font.BOLD, 16));
        opponentScoreLabel.setForeground(Color.WHITE);
        opponentScoreLabel.setHorizontalAlignment(SwingConstants.RIGHT);
        
        // T√™n ng∆∞·ªùi ch∆°i ·ªü g√≥c
        playerNameLabel = new JLabel(currentUser.getString("username"));
        playerNameLabel.setFont(new Font("Arial", Font.BOLD, 14));
        playerNameLabel.setForeground(new Color(255, 255, 0)); // M√†u v√†ng
        playerNameLabel.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
        
        opponentNameLabel = new JLabel(opponentUsername);
        opponentNameLabel.setFont(new Font("Arial", Font.BOLD, 14));
        opponentNameLabel.setForeground(new Color(255, 255, 0)); // M√†u v√†ng
        opponentNameLabel.setHorizontalAlignment(SwingConstants.RIGHT);
        opponentNameLabel.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
        
        scoresPanel.add(myScoreLabel);
        scoresPanel.add(opponentScoreLabel);
        
        // Panel t√™n ng∆∞·ªùi ch∆°i
        JPanel namesPanel = new JPanel(new GridLayout(1, 2, 20, 0));
        namesPanel.setOpaque(false);
        namesPanel.add(playerNameLabel);
        namesPanel.add(opponentNameLabel);
        
        infoPanel.add(timerLabel, BorderLayout.CENTER);
        infoPanel.add(namesPanel, BorderLayout.NORTH);
        infoPanel.add(scoresPanel, BorderLayout.SOUTH);
        
        mainPanel.add(infoPanel, BorderLayout.NORTH);
        
        // Game panel
        gamePanel = new GamePanel();
        mainPanel.add(gamePanel, BorderLayout.CENTER);
        
        // Bottom panel - Info only (no finish button)
        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        bottomPanel.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));
        
        JLabel infoLabel = new JLabel("K√©o th·∫£ h·∫°t g·∫°o v√†o gi·ªè g·∫°o, h·∫°t th√≥c v√†o gi·ªè th√≥c");
        infoLabel.setFont(new Font("Arial", Font.PLAIN, 14));
        infoLabel.setForeground(new Color(100, 100, 100));
        bottomPanel.add(infoLabel);
        
        mainPanel.add(bottomPanel, BorderLayout.SOUTH);
        
        add(mainPanel);
    }
    
    private void startGameTimer() {
        gameTimer = new Timer(1000, e -> {
            if (gameEnded) {
                gameTimer.stop();
                return;
            }
            
            timeLeft--;
            
            int minutes = timeLeft / 60;
            int seconds = timeLeft % 60;
            timerLabel.setText(String.format("‚è±Ô∏è Th·ªùi gian: %02d:%02d", minutes, seconds));
            
            if (timeLeft <= 0) {
                gameTimer.stop();
                handleTimeout();
            } else if (timeLeft <= 10) {
                timerLabel.setForeground(Color.RED);
            }
        });
        gameTimer.start();
    }
    
    
    private void handleMaxScore() {
        if (gameEnded) return;
        
        System.out.println("üéØ handleMaxScore called - myScore: " + myScore);
        gameEnded = true;
        gameTimer.stop();
        gamePanel.setEnabled(false);
        
        // G·ª≠i th√¥ng b√°o ƒë·∫°t ƒëi·ªÉm t·ªëi ƒëa
        JSONObject packet = new JSONObject();
        packet.put("type", Protocol.MAX_SCORE);
        packet.put("final_score", myScore);
        System.out.println("üì§ Sending MAX_SCORE packet: " + packet.toString());
        client.sendMessage(packet.toString());
        
        JOptionPane.showMessageDialog(this, 
            "üéâ B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ h·∫°t!\nCh·ªù k·∫øt qu·∫£...", 
            "Ho√†n th√†nh!", 
            JOptionPane.INFORMATION_MESSAGE);
    }
    
    private synchronized void handleTimeout() {
        if (gameEnded) return;
        
        gameEnded = true;
        gameTimer.stop();
        gamePanel.setEnabled(false);
        
        System.out.println("üîç handleTimeout DEBUG - myScore: " + myScore + ", instance: " + System.identityHashCode(this));
        
        // Double-check: n·∫øu myScore = 0 nh∆∞ng c√≥ grains ƒë√£ ƒë∆∞·ª£c thu th·∫≠p, c√≥ th·ªÉ b·ªã reset
        if (myScore == 0 && !grains.isEmpty()) {
            System.out.println("‚ö†Ô∏è WARNING: myScore is 0 but grains still exist! This might be a bug.");
        }
        
        // G·ª≠i packet v·ªõi ƒëi·ªÉm hi·ªán t·∫°i
        JSONObject packet = new JSONObject();
        packet.put("type", Protocol.TIMEOUT);
        packet.put("final_score", myScore);
        System.out.println("üì§ Sending TIMEOUT packet: " + packet.toString());
        client.sendMessage(packet.toString());
        
        // Hi·ªÉn th·ªã th√¥ng b√°o h·∫øt th·ªùi gian (kh√¥ng ch·ªù k·∫øt qu·∫£)
        JOptionPane.showMessageDialog(this, 
            "‚è∞ Th·ªùi gian ƒë√£ h·∫øt!", 
            "H·∫øt th·ªùi gian", 
            JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void handleQuit() {
        if (gameEnded) return;
        
        int confirm = JOptionPane.showConfirmDialog(this, 
            "N·∫øu tho√°t b·∫°n s·∫Ω t·ª± ƒë·ªông thua!\nB·∫°n c√≥ ch·∫Øc mu·ªën tho√°t?", 
            "C·∫£nh b√°o", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.WARNING_MESSAGE);
        
        if (confirm == JOptionPane.YES_OPTION) {
            gameEnded = true;
            gameTimer.stop();
            gamePanel.setEnabled(false);
            
            // G·ª≠i timeout v·ªõi ƒëi·ªÉm hi·ªán t·∫°i v√† flag tho√°t
            JSONObject packet = new JSONObject();
            packet.put("type", Protocol.TIMEOUT);
            packet.put("final_score", myScore);
            packet.put("is_quit", true); // ƒê√°nh d·∫•u l√† tho√°t
            client.sendMessage(packet.toString());
            
            // Remove listener SAU KHI g·ª≠i packet
            client.removeMessageListener(this);
            
            dispose();
            MainMenuFrame mainMenu = new MainMenuFrame(client, currentUser);
            mainMenu.setVisible(true);
            
            // Y√™u c·∫ßu c·∫≠p nh·∫≠t danh s√°ch online (sau khi t·∫°o MainMenuFrame)
            SwingUtilities.invokeLater(() -> {
                JSONObject request = new JSONObject();
                request.put("type", Protocol.GET_ALL_USERS);
                client.sendMessage(request.toString());
            });
        }
    }
    
    @Override
    public void onMessageReceived(String message) {
        // Ch·ªâ x·ª≠ l√Ω message n·∫øu ƒë√¢y l√† instance hi·ªán t·∫°i
        if (currentInstance != this) {
            System.out.println("‚ö†Ô∏è Ignoring message for old instance: " + System.identityHashCode(this));
            return;
        }
        
        SwingUtilities.invokeLater(() -> {
            try {
                JSONObject response = new JSONObject(message);
                String type = response.getString("type");
                
                System.out.println("üéÆ GameplayFrame received: " + type);
                
                switch (type) {
                    case Protocol.OPPONENT_SCORE:
                        handleOpponentScore(response);
                        break;
                    case Protocol.OPPONENT_FINISHED:
                        handleOpponentFinished(response);
                        break;
                    case Protocol.OPPONENT_LEFT:
                        handleOpponentLeft(response);
                        break;
                    case Protocol.GAME_END:
                        handleGameEnd(response);
                        break;
                    case Protocol.ERROR:
                        handleError(response);
                        break;
                }
            } catch (Exception e) {
                System.out.println("‚ùå GameplayFrame parse error: " + e.getMessage());
                e.printStackTrace();
            }
        });
    }
    
    private void handleOpponentScore(JSONObject response) {
        opponentScore = response.getInt("opponent_score");
        opponentScoreLabel.setText("üë§ ƒê·ªëi th·ªß: " + opponentScore);
    }
    
    private void handleOpponentFinished(JSONObject response) {
        System.out.println("üéÆ Received OPPONENT_FINISHED: " + response.toString());
        
        // Kh√¥ng l√†m g√¨ c·∫£, ch·ªâ log ƒë·ªÉ debug
        // Server s·∫Ω g·ª≠i GAME_END ngay l·∫≠p t·ª©c
    }
    
    private void handleOpponentLeft(JSONObject response) {
        if (gameEnded) {
            System.out.println("‚ö†Ô∏è Game already ended, ignoring OPPONENT_LEFT");
            return;
        }
        
        gameEnded = true;
        gameTimer.stop();
        
        // Disable game panel
        gamePanel.setEnabled(false);
        
        // Remove listener TR∆Ø·ªöC KHI hi·ªÉn th·ªã dialog ƒë·ªÉ tr√°nh nh·∫≠n duplicate packets
        client.removeMessageListener(this);
        
        // Hi·ªÉn th·ªã th√¥ng b√°o chi ti·∫øt nh∆∞ handleGameEnd
        String title = "üèÜ CHI·∫æN TH·∫ÆNG!";
        String message = String.format(
            "Ch√∫c m·ª´ng b·∫°n ƒë√£ th·∫Øng!\n\n" +
            "ƒêi·ªÉm c·ªßa b·∫°n: %d\n" +
            "ƒê·ªëi th·ªß ƒë√£ tho√°t kh·ªèi tr·∫≠n ƒë·∫•u.\n\n" +
            "B·∫°n ƒë√£ ƒë∆∞·ª£c t√≠ch l≈©y ƒëi·ªÉm t·ª´ tr·∫≠n ƒë·∫•u n√†y!",
            myScore
        );
        
        JOptionPane.showMessageDialog(this, message, title, 
            JOptionPane.INFORMATION_MESSAGE);
        
        dispose();
        MainMenuFrame mainMenu = new MainMenuFrame(client, currentUser);
        mainMenu.setVisible(true);
        
        // Y√™u c·∫ßu c·∫≠p nh·∫≠t danh s√°ch online (sau khi t·∫°o MainMenuFrame)
        SwingUtilities.invokeLater(() -> {
            JSONObject request = new JSONObject();
            request.put("type", Protocol.GET_ALL_USERS);
            client.sendMessage(request.toString());
        });
    }
    
    private void handleGameEnd(JSONObject response) {
        System.out.println("üéÆ Received GAME_END: " + response.toString());
        
        // Kh√¥ng check gameEnded ·ªü ƒë√¢y v√¨ c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c set khi h·∫øt th·ªùi gian
        if (!gameEnded) {
            gameEnded = true;
            gameTimer.stop();
        }
        
        // Disable game panel
        gamePanel.setEnabled(false);
        
        String result = response.getString("result");
        int myFinalScore = response.getInt("my_score");
        int oppFinalScore = response.getInt("opponent_score");
        int newTotalScore = response.getInt("new_total_score");
        
        String title, message;
        int messageType;
        
        if ("win".equals(result)) {
            title = "üèÜ CHI·∫æN TH·∫ÆNG!";
            message = String.format(
                "Ch√∫c m·ª´ng b·∫°n ƒë√£ th·∫Øng!\n\n" +
                "ƒêi·ªÉm c·ªßa b·∫°n: %d\n" +
                "ƒêi·ªÉm ƒë·ªëi th·ªß: %d\n\n" +
                "T·ªïng ƒëi·ªÉm t√≠ch l≈©y: %d (+%d)",
                myFinalScore, oppFinalScore, newTotalScore, myFinalScore
            );
            messageType = JOptionPane.INFORMATION_MESSAGE;
        } else if ("lose".equals(result)) {
            title = "‚ùå THUA";
            message = String.format(
                "R·∫•t ti·∫øc! B·∫°n ƒë√£ thua.\n\n" +
                "ƒêi·ªÉm c·ªßa b·∫°n: %d\n" +
                "ƒêi·ªÉm ƒë·ªëi th·ªß: %d\n\n" +
                "T·ªïng ƒëi·ªÉm t√≠ch l≈©y: %d (+%d)",
                myFinalScore, oppFinalScore, newTotalScore, myFinalScore
            );
            messageType = JOptionPane.WARNING_MESSAGE;
        } else {
            title = "ü§ù H√íA";
            message = String.format(
                "Tr·∫≠n ƒë·∫•u h√≤a!\n\n" +
                "ƒêi·ªÉm c·ªßa b·∫°n: %d\n" +
                "ƒêi·ªÉm ƒë·ªëi th·ªß: %d\n\n" +
                "T·ªïng ƒëi·ªÉm t√≠ch l≈©y: %d (+%d)",
                myFinalScore, oppFinalScore, newTotalScore, myFinalScore
            );
            messageType = JOptionPane.INFORMATION_MESSAGE;
        }
        
        JOptionPane.showMessageDialog(this, message, title, messageType);
        
        // C·∫≠p nh·∫≠t th√¥ng tin user v·ªõi ƒëi·ªÉm m·ªõi
        currentUser.put("total_score", newTotalScore);
        
        // Remove listener ƒë·ªÉ tr√°nh leak
        client.removeMessageListener(this);
        
        dispose();
        MainMenuFrame mainMenu = new MainMenuFrame(client, currentUser);
        mainMenu.setVisible(true);
        
        // Y√™u c·∫ßu c·∫≠p nh·∫≠t danh s√°ch online (sau khi t·∫°o MainMenuFrame)
        SwingUtilities.invokeLater(() -> {
            JSONObject request = new JSONObject();
            request.put("type", Protocol.GET_ALL_USERS);
            client.sendMessage(request.toString());
        });
    }
    
    private void handleError(JSONObject response) {
        if (gameEnded) {
            System.out.println("‚ö†Ô∏è Game already ended, ignoring error: " + response.optString("message", "Unknown error"));
            return;
        }
        
        String message = response.getString("message");
        JOptionPane.showMessageDialog(this, message, "L·ªói", JOptionPane.ERROR_MESSAGE);
    }
    
    // ==================== GAME PANEL ====================
    
    class GamePanel extends JPanel {
        private List<PlusOneEffect> plusOneEffects;
        
        public GamePanel() {
            plusOneEffects = new ArrayList<>();
            setBackground(new Color(255, 248, 220));
            
            // ƒê·ªãnh nghƒ©a v·ªã tr√≠ 2 gi·ªè
            riceBasket = new Rectangle(200, 450, 120, 100);  // N√¢ng cao l√™n 70px
            paddyBasket = new Rectangle(680, 450, 120, 100); // N√¢ng cao l√™n 70px
            
            // Mouse listeners cho drag & drop
            addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    if (!isEnabled()) return;
                    
                    // T√¨m h·∫°t t·∫°i v·ªã tr√≠ click
                    for (int i = grains.size() - 1; i >= 0; i--) {
                        Grain grain = grains.get(i);
                        Rectangle grainBounds = new Rectangle(grain.getX() - 15, grain.getY() - 15, 30, 30);
                        
                        if (grainBounds.contains(e.getPoint())) {
                            draggingGrain = grain;
                            offsetX = e.getX() - grain.getX();
                            offsetY = e.getY() - grain.getY();
                            break;
                        }
                    }
                }
                
                @Override
                public void mouseReleased(MouseEvent e) {
                    if (!isEnabled() || draggingGrain == null) return;
                    
                    // Ki·ªÉm tra th·∫£ v√†o gi·ªè n√†o
                    Point dropPoint = e.getPoint();
                    
                    if (riceBasket.contains(dropPoint)) {
                        checkDrop(draggingGrain, "rice");
                    } else if (paddyBasket.contains(dropPoint)) {
                        checkDrop(draggingGrain, "paddy");
                    } else {
                        // Th·∫£ ngo√†i gi·ªè - h·∫°t quay v·ªÅ v·ªã tr√≠ c≈©
                        repaint();
                    }
                    
                    draggingGrain = null;
                }
            });
            
            addMouseMotionListener(new MouseMotionAdapter() {
                @Override
                public void mouseDragged(MouseEvent e) {
                    if (!isEnabled() || draggingGrain == null) return;
                    
                    draggingGrain.setX(e.getX() - offsetX);
                    draggingGrain.setY(e.getY() - offsetY);
                    repaint();
                }
            });
            
            // Timer cho hi·ªáu ·ª©ng +1
            Timer effectTimer = new Timer(50, e -> {
                plusOneEffects.removeIf(effect -> {
                    effect.step++;
                    return effect.step >= 20;
                });
                repaint();
            });
            effectTimer.start();
        }
        
        private synchronized void checkDrop(Grain grain, String basketType) {
            if (grain.getType().equals(basketType)) {
                // ƒê√öNG!
                myScore++;
                System.out.println("üéØ Score increased to: " + myScore + ", instance: " + System.identityHashCode(this));
                myScoreLabel.setText("üìä B·∫°n: " + myScore);
                
                // Hi·ªáu ·ª©ng +1
                Rectangle basket = basketType.equals("rice") ? riceBasket : paddyBasket;
                plusOneEffects.add(new PlusOneEffect(basket.x + basket.width / 2, basket.y));
                
                // X√≥a h·∫°t
                grains.remove(grain);
                
                // G·ª≠i ƒëi·ªÉm l√™n server
                JSONObject packet = new JSONObject();
                packet.put("type", Protocol.SCORE_UPDATE);
                packet.put("new_score", myScore);
                System.out.println("üì§ Sending SCORE_UPDATE: " + myScore);
                client.sendMessage(packet.toString());
                
                // Ki·ªÉm tra n·∫øu ƒë·∫°t ƒëi·ªÉm t·ªëi ƒëa (t·∫•t c·∫£ h·∫°t)
                if (myScore >= totalGrains) {
                    handleMaxScore();
                }
                
                repaint();
            } else {
                // SAI! H·∫°t kh√¥ng l√†m g√¨ c·∫£, v·∫´n ·ªü v·ªã tr√≠ hi·ªán t·∫°i
                repaint();
            }
        }
        
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            
            // V·∫Ω 2 gi·ªè
            // Gi·ªè g·∫°o
            g2d.setColor(new Color(245, 222, 179));
            g2d.fill(riceBasket);
            g2d.setColor(new Color(139, 69, 19));
            g2d.draw(riceBasket);
            g2d.setFont(new Font("Arial", Font.BOLD, 16));
            g2d.drawString("üß∫ Gi·ªè G·∫°o", riceBasket.x + 20, riceBasket.y + riceBasket.height / 2);
            
            // Gi·ªè th√≥c
            g2d.setColor(new Color(222, 184, 135));
            g2d.fill(paddyBasket);
            g2d.setColor(new Color(139, 69, 19));
            g2d.draw(paddyBasket);
            g2d.drawString("üåæ Gi·ªè Th√≥c", paddyBasket.x + 15, paddyBasket.y + paddyBasket.height / 2);
            
            // V·∫Ω c√°c h·∫°t
            for (Grain grain : grains) {
                if (grain == draggingGrain) continue; // V·∫Ω h·∫°t ƒëang k√©o sau c√πng
                
                drawGrain(g2d, grain);
            }
            
            // V·∫Ω h·∫°t ƒëang k√©o
            if (draggingGrain != null) {
                drawGrain(g2d, draggingGrain);
            }
            
            // V·∫Ω hi·ªáu ·ª©ng +1
            for (PlusOneEffect effect : plusOneEffects) {
                float alpha = 1.0f - (effect.step / 20.0f);
                g2d.setColor(new Color(0, 255, 0, (int) (alpha * 255)));
                g2d.setFont(new Font("Arial", Font.BOLD, 24));
                g2d.drawString("+1", effect.x - 10, effect.y - effect.step * 3);
            }
        }
        
        private void drawGrain(Graphics2D g2d, Grain grain) {
            int x = grain.getX();
            int y = grain.getY();
            
            if ("rice".equals(grain.getType())) {
                // V·∫Ω h·∫°t g·∫°o (m√†u tr·∫Øng, h√¨nh oval)
                g2d.setColor(Color.WHITE);
                g2d.fillOval(x - 15, y - 15, 30, 30);
                g2d.setColor(Color.GRAY);
                g2d.drawOval(x - 15, y - 15, 30, 30);
                
                // K√Ω t·ª±
                g2d.setFont(new Font("Arial", Font.BOLD, 12));
                g2d.setColor(Color.BLACK);
                g2d.drawString("üçö", x - 8, y + 5);
            } else {
                // V·∫Ω h·∫°t th√≥c (m√†u v√†ng n√¢u, h√¨nh oval d√†i h∆°n)
                g2d.setColor(new Color(218, 165, 32));
                g2d.fillOval(x - 12, y - 18, 24, 36);
                g2d.setColor(new Color(139, 90, 0));
                g2d.drawOval(x - 12, y - 18, 24, 36);
                
                // K√Ω t·ª±
                g2d.setFont(new Font("Arial", Font.BOLD, 12));
                g2d.setColor(Color.BLACK);
                g2d.drawString("üåæ", x - 8, y + 5);
            }
        }
    }
    
    static class PlusOneEffect {
        int x, y;
        int step;
        
        PlusOneEffect(int x, int y) {
            this.x = x;
            this.y = y;
            this.step = 0;
        }
    }
    
    @Override
    public void dispose() {
        System.out.println("üóëÔ∏è Disposing GameplayFrame instance: " + System.identityHashCode(this));
        
        // Remove listener tr∆∞·ªõc khi dispose
        if (client != null) {
            client.removeMessageListener(this);
        }
        
        // Clear static reference khi dispose
        if (currentInstance == this) {
            currentInstance = null;
        }
        super.dispose();
    }
}

